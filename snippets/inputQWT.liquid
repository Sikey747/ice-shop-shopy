{% comment %}
  {% render "inputQWT", qwantity: item.quantity, index:forloop.index %}
{% endcomment %}

<div class="flex gap-1 qwt">
  <div
    class="inline-block px-3 py-2 bg-white border border-gray-200 rounded-lg dark:bg-slate-900 dark:border-gray-700"
    data-hs-input-number
  >
    <div class="flex items-center gap-x-1.5">
      <button
        type="button"
        class="inline-flex items-center justify-center text-sm font-medium text-gray-800 bg-white border border-gray-200 rounded-md shadow-sm size-6 gap-x-2 hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
        data-hs-input-number-decrement
      >
        <svg
          class="flex-shrink-0 size-3.5"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M5 12h14" />
        </svg>
      </button>
      <input
        name="updates[]"
        class="w-6 p-0 text-center text-gray-800 bg-transparent border-0 focus:ring-0 dark:text-white [-moz-appearance:_textfield] focus:outline-none [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none"
        type="number"
        value="{{ qwantity }}"
        data-qwt
        data-index="index"
        data-id="{{ id }}"
      >
      <button
        type="button"
        class="inline-flex items-center justify-center text-sm font-medium text-gray-800 bg-white border border-gray-200 rounded-md shadow-sm size-6 gap-x-2 hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
        data-hs-input-number-increment
      >
        <svg
          class="flex-shrink-0 size-3.5"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M5 12h14" /><path d="M12 5v14" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script def>
  const formatMoneyShop = (cents, format) => {
    if (typeof cents == 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = format || this.money_format;

    function defaultOption(opt, def) {
      return typeof opt == 'undefined' ? def : opt;
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);

      var parts = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents = parts[1] ? decimal + parts[1] : '';

      return dollars + cents;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };

  const tostOpen = (text, type) => {
    Toastify({
      text: `${text}`,
      duration: 3000,
      className: `toast-${type}`,
      newWindow: true,
      close: true,
      gravity: 'bottom',
      position: 'right',
    }).showToast();
  };

  const sendCartQWT = async (id, quantity) => {
    try {
      let formData = {
        id: id,
        quantity: quantity,
      };

      const response = await fetch(window.Shopify.routes.root + 'cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      tostOpen(error.message, 'error');
    }
  };

  const sendRemuveProd = async (id) => {
    try {
      let formData = {
        id: id,
        quantity: 0,
      };

      const response = await fetch(window.Shopify.routes.root + 'cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.log(error.message);
    }
  };

  const findItemsById = (id, data) => {
    const correctItem = data.items.find((el) => {
      return el.variant_id === +id;
    });

    return correctItem;
  };

  const chengePriseItem = (id, NewPrice) => {
    const elPrice = document.querySelector(`[data-price-id="${id}"]`);
    const monyFormat = document.querySelector('[data-money-format]').getAttribute('data-money-format');

    if (elPrice && monyFormat) {
      elPrice.innerHTML = formatMoneyShop(NewPrice, monyFormat);
    }
  };

  const chengeTotalPrice = (totalPrice) => {
    const totalPriceElement = document.querySelector('[data-total-price]');
    const monyFormat = document.querySelector('[data-money-format]').getAttribute('data-money-format');

    if (totalPriceElement && monyFormat) {
      totalPriceElement.innerHTML = formatMoneyShop(totalPrice, monyFormat);
    }
  };

  const chengeTotalCountProd = (itemsCount) => {
    const cartItemsCounters = document.querySelectorAll('[data-cart-items]');

    if (cartItemsCounters.length > 0) {
      cartItemsCounters.forEach((cartItemsCounter) => {
        cartItemsCounter.innerHTML = itemsCount;
      });
    }
  };

  const chengeQwtInput = async (id, quantity, qwtInput) => {
    const data = await sendCartQWT(id, quantity);
    const correctItem = findItemsById(id, data);
    const newPrice = +correctItem.final_line_price;
    const totalPrice = +data.total_price;
    const itemsCount = +data.item_count;

    qwtInput.value = correctItem.quantity;
    chengePriseItem(id, newPrice);
    chengeTotalPrice(totalPrice);
    chengeTotalCountProd(itemsCount);
  };

  const remuveProduct = async (id) => {
    const data = await sendRemuveProd(id);

    if (data.items.length === 0) {
      const cartWraper = document.querySelector('[data-cart-wraper]').remove();
      const cartEmpty = document.createElement('div');
      const newCartWraper = document.querySelector('.cart__container');
      cartEmpty.innerHTML = `<div class="flex flex-col items-center justify-center gap-4 h-dvh">
                        <h1 class="font-semibold 4xl text-[50px]">Cart is empty</h1>
                  <a href="{{ routes.all_products_collection_url  }}">
                  {% render "button"
                        , text: "Finde Product" class: "text-3xl" %}
                      </a>
                    </div>`;
      newCartWraper.appendChild(cartEmpty);
      chengeTotalCountProd(0);

      tostOpen('Delite product', 'error');
    }

    let productproductItemsID = null;
    const totalPrice = +data.total_price;
    const itemsCount = +data.item_count;
    const dataIDs = data.items.map((el) => el.variant_id);
    const productItemsElements = document.querySelectorAll('[data-item-card]');

    if (productItemsElements.length > 0) {
      productproductItemsID = Array(...document.querySelectorAll('[data-item-card]')).map(
        (el) => +el.getAttribute('data-item-card')
      );

      chengeTotalPrice(totalPrice);
      chengeTotalCountProd(itemsCount);

      const remuveID = productproductItemsID.find((element) => !dataIDs.includes(element));

      if (remuveID) {
        const elementToRemove = document.querySelector(`[data-item-card='${remuveID}']`);
        if (elementToRemove) {
          elementToRemove.remove();
          tostOpen('Delite product', 'error');
        }
      }
    }
  };

  const qwtInputHandler = () => {
    const qwtInputs = document.querySelectorAll('[data-qwt]');
    const remuveElements = document.querySelectorAll("[href^='/cart/change?id=']");

    if (qwtInputs.length > 0) {
      qwtInputs.forEach((qwtInput) => {
        const addButton = qwtInput.nextElementSibling;
        const removeButton = qwtInput.previousElementSibling;

        addButton.addEventListener('click', () => {
          let value = parseInt(qwtInput.value) || 0;
          const id = qwtInput.getAttribute('data-id');
          let quantity = value + 1;
          chengeQwtInput(id, quantity, qwtInput);
        });

        removeButton.addEventListener('click', () => {
          let value = parseInt(qwtInput.value) || 0;
          let quantity = value - 1;
          if (value > 0 && quantity > 0) {
            const id = qwtInput.getAttribute('data-id');
            chengeQwtInput(id, quantity, qwtInput);
          }
        });
      });
    }

    if (remuveElements.length > 0) {
      remuveElements.forEach((remuveElement) => {
        remuveElement.addEventListener('click', (event) => {
          const id = remuveElement.getAttribute('href').split('=')[1].split(':')[0];

          event.preventDefault();
          remuveProduct(id);
        });
      });
    }
  };

  window.addEventListener('DOMContentLoaded', qwtInputHandler);
</script>
